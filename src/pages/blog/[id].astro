---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
// import Subscribe from '../../components/Subscribe.astro'; For later use
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';

export async function getStaticPaths() {
  const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
  const postCount = posts.length;
  return posts.map((post, index) => ({
    params: { id: post.id },
    props: {
      post,
      prevPost: index + 1 !== postCount ? posts[index + 1] : null,
      nextPost: index !== 0 ? posts[index - 1] : null,
    },
  }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content } = await render(post);
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={false}>
  <article class="mb-12">
    <header class="mb-8">
      <h1 class="leading-tight">{title}</h1>
      <div class="mt-4 md:mt-6">
        <FormattedDate date={publishDate} />
        {
          updatedDate && (
            <>
              {' '}
              <span>
                (Updated on <FormattedDate date={updatedDate} />)
              </span>
            </>
          )
        }
      </div>
    </header>
    <div class="max-w-none prose md:text-xl">
      <Content />
    </div>
    <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between">
      {
        tags.length > 0 && (
          <div class="flex flex-wrap gap-3 text-sm md:text-base font-code font-semibold tracking-wide mb-2">
            {tags.map((tag) => (
              <a
                class="hover:text-emerald-300 hover:underline hover:decoration-2 hover:underline-offset-2 transition-all duration-250 bg-zinc-900 hover:bg-zinc-800 rounded-full px-3 py-2.5"
                href={`/tags/${slugify(tag)}`}
              >
                #{tag}
              </a>
            ))}
          </div>
        )
      }
      <Button class="ml-auto" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">Share</Button>
    </div>
  </article>
  {
    (prevPost || nextPost) && (
      <div class="my-10">
        <h2 class="mb-12 text-xl md:text-2xl font-heading">Read Next</h2>
        {nextPost && <PostPreview post={nextPost} class="mb-8 last:mb-2" headingLevel="h3" />}
        {prevPost && <PostPreview post={prevPost} class="mb-8 last:mb-2" headingLevel="h3" />}
      </div>
    )
  }
  <!-- <Subscribe class="my-16 sm:my-24" /> -->
</BaseLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
    copyUrlButton?.addEventListener('click', async () => {
      await copyUrl(copyUrlButton);
    });

    async function copyUrl(button: HTMLButtonElement) {
      let url = button.getAttribute('data-url') || '';
      let label = button.innerText;

      await navigator.clipboard.writeText(url);

      button.innerText = 'Copied';

      setTimeout(() => {
        button.innerText = label;
      }, 2500);
    }
  });
</script>
